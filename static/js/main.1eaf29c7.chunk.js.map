{"version":3,"sources":["components/bookItem/BookItem.js","App.js","serviceWorker.js","index.js"],"names":["BookItem","react_default","a","createElement","Item","Image","src","this","props","bookCoverImg","as","href","amazonLink","target","Content","Header","bookName","Meta","className","bookAuthor","Extra","Button","color","rel","Label","image","floated","alt","index","numberOfMentions","totalMentionsClaps","score","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","books","hasMoreItems","page","self","url","qwest","get","cache","then","xhr","resp","docs","map","book","push","setState","catch","e","response","console","error","loader","items","bookObject","i","components_bookItem_BookItem","key","id","react_infinite_scroller_default","pageStart","loadMore","loadItems","bind","hasMore","Group","divided","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1eaf29c7.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Item, Label } from 'semantic-ui-react'\nimport './BookItem.css';\n\n// const paragraph = <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n\n\nclass BookItem extends React.Component {\n\n  render() {\n    return (\n\n      <Item>\n        <Item.Image src={this.props.bookCoverImg} as='a'\n          href={this.props.amazonLink}  target=\"_blank\" />\n\n        <Item.Content>\n          <Item.Header as='a'>{this.props.bookName}</Item.Header>\n          <Item.Meta>\n            <span className='cinema'>{this.props.bookAuthor}</span>\n          </Item.Meta>\n          {/* <Item.Description>{paragraph}</Item.Description> */}\n          <Item.Extra>\n            <Button color='yellow'  >\n              <a href={this.props.amazonLink}  target=\"_blank\" rel=\"noopener noreferrer\" className='LinkButtonContent'>Available on Amazon</a>\n            </Button>\n            <Label as='a' image floated='right'>\n              <img src='https://react.semantic-ui.com/images/avatar/small/stevie.jpg' alt=\"amazon\"/>\n              Index: {this.props.index + 1}\n            </Label>\n            <Label as='a' color='blue' image>\n              <img src='https://react.semantic-ui.com/images/avatar/small/veronika.jpg' alt=\"mentions\"/>\n              Mentions: {this.props.numberOfMentions}\n              {/* <Label.Detail>Friend</Label.Detail> */}\n           </Label>\n            <Label as='a' image floated='right'>\n              <img src='https://react.semantic-ui.com/images/avatar/small/joe.jpg' alt=\"claps\"/>\n              Claps: {this.props.totalMentionsClaps}\n            </Label>\n            <Label as='a' image floated='right'>\n              <img src='https://react.semantic-ui.com/images/avatar/small/stevie.jpg' alt=\"score\"/>\n              Score: {this.props.score}\n            </Label>\n          </Item.Extra>\n        </Item.Content>\n      </Item>\n\n    )\n\n    \n\n\n  }\n}\n\nexport default BookItem;\n\n","// import React, { Component } from 'react';\n// import { compose } from 'recompose';\n// import BookItem from './components/bookItem/BookItem';\n// import { Item } from 'semantic-ui-react'\n\n\n// import BookList from './components/bookList/BookList';\n// // import logo from './logo.svg';\n// import './App.css';\n// // import { Button } from 'semantic-ui-react'\n// // import { Image as ImageComponent, Item } from 'semantic-ui-react'\n\n// // const paragraph = <ImageComponent src={require('/Users/itaycohen/Documents/GitHub/the-books-of-medium/src/images/short-paragraph.png')} />\n\n\n// const applyUpdateResult = (result) => (prevState) => ({\n//   docs: [...prevState.docs, ...result.docs],\n//   page: result.page,\n//   isLoading: false,\n// });\n\n// const applySetResult = (result) => (prevState) => ({\n//   docs: result.docs,\n//   page: result.page,\n//   isLoading: false,\n// });\n\n\n// const getBooks = (page) => `https://thebooksofmedium-api.herokuapp.com/books/sub-page\"?limit=20&&page=${page + 1}`;\n\n\n\n\n\n// class App extends Component {\n\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       docs: [],\n//       page: null,\n//       isLoading: false,\n//     };\n//     console.log(\"constructor\")\n//     this.fetchStories(\"a\", 0);\n\n//   }\n\n\n//   onInitialSearch = (e) => {\n//     // e.preventDefault();\n\n//     // const { value } = this.input;\n\n//     // if (value === '') {\n//     //   return;\n//     // }\n\n//     // this.fetchStories(value, 0);\n\n//     this.fetchStories(0);\n//   }\n\n\n//   onPaginatedSearch = (e) => this.fetchStories(this.state.page + 1);\n\n//   fetchStories = (page) => {\n//     this.setState({ isLoading: true });\n//     fetch(getBooks(page))\n//       .then(response => response.json())\n//       .then(result => {\n//         this.onSetResult(result, page)\n//         console.log(\"docs:\", result.docs)\n//       }\n//       );\n\n//   }\n\n//   onSetResult = (result, page) =>\n//     page === 0\n//       ? this.setState(applySetResult(result))\n//       : this.setState(applyUpdateResult(result));\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {/* <BookList /> */}\n\n\n//         <ListWithLoadingWithInfinite\n//           list={this.state.docs}\n//           isLoading={this.state.isLoading}\n//           page={this.state.page}\n//           onPaginatedSearch={this.onPaginatedSearch}\n//         />\n//       </div>\n\n\n//     );\n//   }\n// }\n\n// const withLoading = (Component) => (props) =>\n//   <div>\n//     <Component {...props} />\n\n//     <div className=\"interactions\">\n//       {props.isLoading && <span>Loading...</span>}\n//     </div>\n//   </div>\n\n\n\n// const withInfiniteScroll = (Component) =>\n//   class WithInfiniteScroll extends React.Component {\n//     componentDidMount() {\n//       window.addEventListener('scroll', this.onScroll, false);\n//     }\n\n//     componentWillUnmount() {\n//       window.removeEventListener('scroll', this.onScroll, false);\n//     }\n\n//     onScroll = () => {\n//       if (\n//         (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 500) &&\n//         this.props.list.length &&\n//         !this.props.isLoading\n//       ) {\n//         this.props.onPaginatedSearch();\n//       }\n//     }\n\n//     render() {\n//       return <Component {...this.props} />;\n//     }\n//   }\n\n\n\n// // const List = ({ list }) =>\n// // <div className=\"list\">\n// //   {list.map(item => <div className=\"list-row\" key={item._id}>\n// //     <a href={item.amazonLink}>{item.bookName}</a>\n// //   </div>)}\n// // </div>\n\n\n// const List = ({ list }) =>\n//   <Item.Group divided>\n//     {\n//       list.map((bookObject, index) => {\n//         return (\n//           <BookItem\n//             id={bookObject.id}\n//             bookName={bookObject.bookName}\n//             bookAuthor={bookObject.bookAuthor}\n//             amazonLink={bookObject.amazonLink}\n//             // bookCoverImg={bookObject.bookCoverImg}\n//             totalMentionsClaps={bookObject.totalMentionsClaps}\n//             numberOfMentions={bookObject.numberOfMentions}\n//             score={bookObject.score}\n//             index={index}\n//           />\n//         );\n//       })\n//     }\n//   </Item.Group>\n\n\n\n// https://thebooksofmedium-api.herokuapp.com/books/sub-page?limit=20&&page=${page + 1}`\n\n\n\n// const ListWithLoadingWithInfinite = compose(\n//   withInfiniteScroll,\n//   withLoading,\n// )(List);\n\n// export default App;\n\nimport React, { Component } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport qwest from 'qwest';\nimport BookItem from './components/bookItem/BookItem';\nimport { Item } from 'semantic-ui-react'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      books: [],\n      hasMoreItems: true,\n    };\n  }\n\n  loadItems(page) {\n    var self = this;\n\n    // var url = api.baseUrl + '/users/8665091/favorites';\n    var url = \"https://thebooksofmedium-api.herokuapp.com/books/sub-page?limit=50&&page=\" + page;\n    // var url = \"https://thebooksofmedium-api.herokuapp.com/books/sub-page?limit=20&&page=100\";\n\n\n    // qwest.get(url, {\n    //         cache: true\n    //     })\n\n    qwest.get(url, {\n      cache: true\n    })\n      .then(function (xhr, resp) {\n        if (resp) {\n          var books = self.state.books;\n          resp.docs.map((book) => {\n            books.push(book);\n          });\n          self.setState({\n            books: books,\n          });\n        }\n      })\n      .catch(function (e, xhr, response) {\n        self.setState({\n          hasMoreItems: false\n        });\n        console.error(\"no more\")\n      });\n  }\n\n  render() {\n    const loader = <div className=\"loader\">Loading ...</div>;\n\n    var items = [];\n    this.state.books.map((bookObject, i) => {\n      items.push(\n        // <div className=\"book\" key={i}>\n        //   <a href={book.bookName} target=\"_blank\">\n        //     <img src={book.bookCoverImg} width=\"150\" height=\"200\" />\n        //     <p className=\"title\">{book.bookName}</p>\n        //   </a>\n        // </div>\n\n\n        <BookItem\n          key={i}\n          id={bookObject.id}\n          bookName={bookObject.bookName}\n          bookAuthor={bookObject.bookAuthor}\n          amazonLink={bookObject.amazonLink}\n          bookCoverImg={bookObject.bookCoverImg}\n          totalMentionsClaps={bookObject.totalMentionsClaps}\n          numberOfMentions={bookObject.numberOfMentions}\n          score={bookObject.score}\n          index={i}\n        />\n      );\n    });\n\n    return (\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={this.loadItems.bind(this)}\n        hasMore={this.state.hasMoreItems}\n        loader={loader}>\n\n        <div className=\"books\">\n          <Item.Group divided>\n            {items}\n          </Item.Group>\n        </div>\n      </InfiniteScroll>\n    );\n  }\n};\n\n{/* <Item.Group divided>\n  {\n    list.map((bookObject, index) => {\n      return (\n        <BookItem\n          id={bookObject.id}\n          bookName={bookObject.bookName}\n          bookAuthor={bookObject.bookAuthor}\n          amazonLink={bookObject.amazonLink}\n          // bookCoverImg={bookObject.bookCoverImg}\n          totalMentionsClaps={bookObject.totalMentionsClaps}\n          numberOfMentions={bookObject.numberOfMentions}\n          score={bookObject.score}\n          index={index}\n        />\n      );\n    })\n  }\n</Item.Group> */}\n\n\nexport default App;\n\n\n// ReactDOM.render(\n//     <App />\n// , document.getElementById('root'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n// export const bookList = "],"sourceRoot":""}